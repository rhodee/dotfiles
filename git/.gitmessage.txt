# conventional commit messsage types
# API relevant changes
#     feat Commits, that adds or remove a new feature
#     fix Commits, that fixes a bug
# refactor Commits, that rewrite/restructure your code, however does not change any API behaviour
#     perf Commits are special refactor commits, that improve performance
# style Commits, that do not affect the meaning (white-space, formatting, missing semi-colons, etc)
# test Commits, that add missing tests or correcting existing tests
# docs Commits, that affect documentation only
# build Commits, that affect build components like build tool, ci pipeline, dependencies, project version, ...
# ops Commits, that affect operational components like infrastructure, deployment, backup, recovery, ...
# chore Miscellaneous commits e.g. modifying .gitignore
#
#
# 50-character subject line
#
# 72-character wrapped longer description. This should answer:
#
# * Why was this change necessary?
# * How does it address the problem?
# * Are there any side effects?
#
# Include a link to the ticket, if any.
#
# Add co-authors if you worked on this code with others:
#
# Co-authored-by: Full Name <email@example.com>
# Co-authored-by: Full Name <email@example.com>
